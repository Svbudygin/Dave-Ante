import aiogram
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from config import api_token, admin_id, mail_to
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import sqlite3
from mail import send_email, send_email_with_photo
import random

message_delete = {}
API_TOKEN = api_token
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
db = sqlite3.connect('giveaway.db')
cur = db.cursor()
cur.execute("CREATE TABLE IF NOT EXISTS Users (id int, username_url TEXT)")
db.commit()
db.close()


class Form(StatesGroup):
    name_state = State()
    age_state = State()
    city_state = State()
    feedback_state = State()
    from_proof_to_feedback_state = State()
    from_what_u_find_item_state = State()
    from_not_bought_to_complain = State()
    feedback_state_only_complain = State()
    take_part_in_giveaway = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message, state: FSMContext):
    current_user = message.from_user.id
    with open("admins.txt", 'r', encoding='utf-8') as file:
        if current_user in map(int, file.readlines()):
            markup = InlineKeyboardMarkup(row_width=1)
            button1 = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö",
                                           callback_data='check_amount')
            button2 = InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", callback_data="choose_winner")
            button3 = InlineKeyboardButton("DEBUG BUTTON", callback_data="check_subscr")
            markup.add(button1, button2, button3)
            await message.answer(f'{message.from_user.full_name}, –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–∏—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∞:',
                                 reply_markup=markup)
        else:
            channel_link = 'https://t.me/+bFibV6s-K-o3ZjZi'
            markup = InlineKeyboardMarkup(row_width=1)
            button1 = InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=channel_link)
            button2 = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscr")
            markup.add(button1, button2)
            await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª", reply_markup=markup)


@dp.callback_query_handler(lambda query: query.data in {'choose_winner', 'check_amount'})
async def callback_giveaway(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'check_amount':
        db = sqlite3.connect('giveaway.db')
        cursor = db.cursor()
        cursor.execute("SELECT * FROM Users")
        res = cursor.fetchall()
        await bot.send_message(chat_id=callback_query.message.chat.id, text=f'–°–µ–π—á–∞—Å —É—á–∞—Å—Ç–≤—É—é—Ç {len(res)} —á–µ–ª–æ–≤–µ–∫!')
        db.close()
    elif callback_query.data == 'choose_winner':
        try:
            db = sqlite3.connect('giveaway.db')
            cursor = db.cursor()
            cursor.execute('SELECT * FROM Users')
            res = cursor.fetchall()
            db.close()
            winner_id, winner_url = res[random.randrange(0, len(res))]
            await bot.send_message(callback_query.from_user.id, text=f'–ù–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å - @{winner_url}')
            # for e in res:
            #     await bot.send_message(e[0], text=f'–ù–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å - @{winner_url}')
        except ValueError:
            await bot.send_message(callback_query.from_user.id, text=f'–í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –µ—â—ë –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!')


@dp.callback_query_handler(lambda query: query.data in {'check_subscr'})
async def bought_item1(callback_query: types.CallbackQuery, state: FSMContext):
    channel_id = -1002122669585
    user = await bot.get_chat_member(chat_id=channel_id, user_id=callback_query.from_user.id)
    is_subscribed = user.status == 'member' or user.status == 'creator' or user.status == 'administrator'
    if is_subscribed:
        msg3 = await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëã\n–ü—Ä–æ—Å–∏–º –í–∞—Å —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?"
        )
        message_delete[callback_query.message.chat.id] = [msg3.message_id]
        await Form.name_state.set()
    else:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª! /start"
        )
        await state.finish()


@dp.message_handler(state=Form.name_state)
async def process_name(message: types.Message, state: FSMContext):
    name_of_user = message.text
    message_delete.get(message.chat.id, []).append(message.message_id)
    for message_id in message_delete.get(message.chat.id, []):
        try:
            await bot.delete_message(message.chat.id, message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass
    async with state.proxy() as data:
        data['name_of_user'] = name_of_user
    msg3 = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name_of_user}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    message_delete[message.chat.id] = [msg3.message_id]
    await Form.age_state.set()


@dp.message_handler(state=Form.age_state)
async def process_age(message: types.Message, state: FSMContext):
    age_of_user = message.text
    if age_of_user.isdigit():
        message_delete.get(message.chat.id, []).append(message.message_id)
        for message_id in message_delete.get(message.chat.id, []):
            try:
                await bot.delete_message(message.chat.id, message_id)
            except aiogram.utils.exceptions.MessageToDeleteNotFound:
                pass
        async with state.proxy() as data:
            data['age_of_user'] = age_of_user
        msg3 = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ò–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?")
        message_delete[message.chat.id] = [msg3.message_id]
        await Form.city_state.set()
    else:
        await message.answer(text=f"{message.text} - —ç—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä–∞! /start")
        await state.finish()


@dp.message_handler(state=Form.city_state)
async def process_city(message: types.Message, state: FSMContext):
    city_of_user = message.text
    message_delete.get(message.chat.id, []).append(message.message_id)
    for message_id in message_delete.get(message.chat.id, []):
        try:
            await bot.delete_message(message.chat.id, message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass
    async with state.proxy() as data:
        data['city_of_user'] = city_of_user
    markup = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton("–Ø –∫—É–ø–∏–ª(–∞) —Ç–æ–≤–∞—Ä", callback_data='bought')
    button2 = InlineKeyboardButton("–Ø –Ω–µ –∫—É–ø–∏–ª(–∞) —Ç–æ–≤–∞—Ä", callback_data='not_bought')
    markup.add(button1, button2)
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {data['name_of_user']}! –ë—Ä–µ–Ω–¥ Dave&Ante —Ä–∞–¥–∞ –≤–∞—à–µ–º—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—é –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞, —Å–¥–µ–ª–∞–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤).",
        reply_markup=markup
    )


@dp.callback_query_handler(lambda query: query.data in {'bought', 'not_bought'}, state=Form.city_state)
async def bought_item(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == 'not_bought':
        message_delete.get(callback_query.message.chat.id, []).append(callback_query.message.message_id)
        for message_id in message_delete.get(callback_query.message.chat.id, []):
            try:
                await bot.delete_message(callback_query.message.chat.id, message_id)
            except aiogram.utils.exceptions.MessageToDeleteNotFound:
                pass

        await bot.send_message(callback_query.message.chat.id,
                               text='–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, p–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ?')
        await state.update_data(FeedbackType=callback_query.data)
        await Form.feedback_state_only_complain.set()
    else:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=None

        )
        await Form.from_proof_to_feedback_state.set()


@dp.message_handler(lambda message: not message.photo, state=Form.from_proof_to_feedback_state)
async def check_photo(message: types.Message, state: FSMContext):
    await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start')
    await state.finish()


@dp.message_handler(content_types=['photo'], state=Form.from_proof_to_feedback_state)
async def feedback(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
    markup = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton("–•–æ—á—É –ø–æ—Ö–≤–∞–ª–∏—Ç—å –≤–∞—Å", callback_data='praise')
    button2 = InlineKeyboardButton("–•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data='improve')
    button3 = InlineKeyboardButton("–•–æ—á—É –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à —Ç–æ–≤–∞—Ä", callback_data='complain')
    button4 = InlineKeyboardButton("–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data='questions')
    markup.add(button1, button2, button3, button4)

    await message.answer(
        "–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –Ω–∞—à–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –±—Ä–µ–Ω–¥–∞, –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏ (–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è, –±–∏–ª–µ—Ç—ã –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–∏, Stand-up –∫–æ–Ω—Ü–µ—Ä—Ç—ã, —ç–∫—Å–∫—É—Ä—Å–∏–∏). –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª.\n\n–° —Ä–∞–¥–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –ø–æ—Ö–≤–∞–ª—ã –∏ –∂–∞–ª–æ–±—ã –ø–æ –Ω–∞—à–µ–º—É —Ç–æ–≤–∞—Ä—É",
        reply_markup=markup
    )


@dp.callback_query_handler(lambda query: query.data in {'praise', 'questions', 'complain', 'improve'},
                           state=Form.from_proof_to_feedback_state)
async def bought_item2(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(FeedbackType=callback_query.data)
    if callback_query.data == 'praise':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏ —Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –Ω–∞—à–ª–∏ –Ω–∞—à —Ç–æ–≤–∞—Ä?"
        )
        await Form.feedback_state.set()
    elif callback_query.data == 'complain':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, p–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ –∏ —Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –Ω–∞—à–ª–∏ –Ω–∞—à —Ç–æ–≤–∞—Ä?"
        )
        await Form.feedback_state.set()
    elif callback_query.data == 'questions':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞–º?\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã –Ω–∞—à–ª–∏ –Ω–∞—à —Ç–æ–≤–∞—Ä.\n–ò –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ—á—Ç—É –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        await Form.feedback_state.set()
    elif callback_query.data == 'improve':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ú—ã –≥–æ—Ç–æ–≤—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –Ω–∞—à–ª–∏ –Ω–∞—à —Ç–æ–≤–∞—Ä:"
        )
        await Form.feedback_state.set()


@dp.message_handler(state=Form.feedback_state_only_complain)
async def feedback_complain_func(message: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", callback_data='drawing')
    markup.add(button1)
    await bot.send_message(message.chat.id,
                           "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.–° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ Dave&Ante"
                           , reply_markup=markup
                           )
    feedback_from_user = message.text
    async with state.proxy() as data:
        text_to_admin = f"Name: {data['name_of_user']}\nAge: {data['age_of_user']}\nCity: {data['city_of_user']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ({data['FeedbackType']}): {feedback_from_user}"
        await bot.send_message(chat_id=admin_id, text=text_to_admin)

    send_email(mail_to, text_to_admin)
    await state.finish()


@dp.message_handler(state=Form.feedback_state)
async def feedback_func(message: types.Message, state: FSMContext):
    markup = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton("–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!", callback_data='drawing')
    markup.add(button1)
    await bot.send_message(message.chat.id,
                           "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –° —É–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ Dave&Ante",
                           reply_markup=markup)
    feedback_from_user = message.text
    async with state.proxy() as data:
        text_to_admin = f"Name: {data['name_of_user']}\nAge: {data['age_of_user']}\nCity: {data['city_of_user']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ({data['FeedbackType']}): {feedback_from_user}"
        await bot.send_photo(chat_id=admin_id,
                             photo=data['photo'],
                             caption=text_to_admin)

    file_info = await bot.get_file(data['photo'])
    file_path = file_info.file_path

    file_url = f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}"
    send_email_with_photo(mail_to, text_to_admin, file_url)
    await state.finish()


@dp.callback_query_handler(lambda query: query.data in {'drawing'})
async def giveaway_func(callback_query: types.CallbackQuery, state: FSMContext):
    db = sqlite3.connect('giveaway.db')
    cur = db.cursor()
    cur.execute("SELECT * FROM Users WHERE id=?", (callback_query.from_user.id,))
    res = cur.fetchone()
    if res is None:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞."
        )
        user_url = callback_query.from_user.username
        cur.execute('INSERT INTO Users (id, username_url) VALUES (?,?)',
                    (callback_query.from_user.id, user_url))
        db.commit()
        db.close()
        await state.finish()
    else:
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í—ã —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö."
        )
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp)
