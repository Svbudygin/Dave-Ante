import sqlite3
import aiogram
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import Bot, Dispatcher, executor, types
from config import api_token
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

message_delete = {}
API_TOKEN = api_token
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Form(StatesGroup):
    name_state = State()
    age_state = State()
    city_state = State()
    feedback_state = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message, state: FSMContext):
    # conn = sqlite3.connect("data/tokens.sql")
    # cursor = conn.cursor()
    # cursor.execute(
    #     'CREATE TABLE IF NOT EXISTS tokens_tbl (id int name primary key, userid varchar(200), NotionToken varchar(200), DBToken varchar(1000))')
    # conn.commit()
    # cursor.close()
    # conn.close()
    msg3 = await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üëã\n–ü—Ä–æ—Å–∏–º –í–∞—Å —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")
    message_delete[message.chat.id] = [msg3.message_id]
    await Form.name_state.set()


@dp.message_handler(state=Form.name_state)
async def process_name(message: types.Message, state: FSMContext):
    name_of_user = message.text
    message_delete.get(message.chat.id, []).append(message.message_id)
    for message_id in message_delete.get(message.chat.id, []):
        try:
            await bot.delete_message(message.chat.id, message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass

    # conn = sqlite3.connect("data/tokens.sql")
    # cursor = conn.cursor()
    # cursor.execute(
    #     f'INSERT INTO tokens_tbl (userid, NotionToken) VALUES ("%s", "%s")' % (str(message['from']['id']), user_token))
    # cursor.execute('UPDATE tokens_tbl SET NotionToken=? WHERE userid=?', (user_token, (str(message['from']['id']))))
    # conn.commit()
    # cursor.close()
    # conn.close()
    msg3 = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, {name_of_user}, –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    message_delete[message.chat.id] = [msg3.message_id]
    await Form.age_state.set()


@dp.message_handler(state=Form.age_state)
async def process_name(message: types.Message, state: FSMContext):
    age_of_user = message.text
    print(age_of_user)
    message_delete.get(message.chat.id, []).append(message.message_id)
    for message_id in message_delete.get(message.chat.id, []):
        try:
            await bot.delete_message(message.chat.id, message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass
    msg3 = await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ò–∑ –∫–∞–∫–æ–≥–æ –í—ã –≥–æ—Ä–æ–¥–∞?")
    message_delete[message.chat.id] = [msg3.message_id]
    await Form.city_state.set()


@dp.message_handler(state=Form.city_state)
async def process_name(message: types.Message, state: FSMContext):
    city_of_user = message.text
    message_delete.get(message.chat.id, []).append(message.message_id)
    for message_id in message_delete.get(message.chat.id, []):
        try:
            await bot.delete_message(message.chat.id, message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass
    await state.finish()
    user_name = message.from_user.first_name
    markup = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton("–Ø –∫—É–ø–∏–ª(–∞) —Ç–æ–≤–∞—Ä", callback_data='bought')
    button2 = InlineKeyboardButton("–Ø –Ω–µ –∫—É–ø–∏–ª(–∞) —Ç–æ–≤–∞—Ä", callback_data='not_bought')
    markup.add(button1, button2)

    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ë—Ä–µ–Ω–¥ Dave&Ante —Ä–∞–¥–∞ –≤–∞—à–µ–º—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—é –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞, —Å–¥–µ–ª–∞–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤).",
        reply_markup=markup
    )


@dp.callback_query_handler(lambda query: query.data == 'bought')
async def bought_item(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."
    )


@dp.callback_query_handler(lambda query: query.data == 'not_bought')
async def not_bought_item(callback_query: types.CallbackQuery):
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text="–ñ–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ –∫—É–ø–∏–ª–∏ —Ç–æ–≤–∞—Ä. –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
    )


@dp.message_handler(commands=['feedback'])
async def feedback(message: types.Message):
    markup = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton("–•–æ—á—É –ø–æ—Ö–≤–∞–ª–∏—Ç—å –≤–∞—Å", callback_data='praise')
    button2 = InlineKeyboardButton("–•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç", callback_data='improve')
    button3 = InlineKeyboardButton("–•–æ—á—É –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –≤–∞—à —Ç–æ–≤–∞—Ä", callback_data='complain')
    button4 = InlineKeyboardButton("–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ –Ω–∞–º?", callback_data='questions')
    markup.add(button1, button2, button3, button4)

    await message.answer(
        "–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º –Ω–∞—à–∏—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π, –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–≥–æ –±—Ä–µ–Ω–¥–∞, –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏ (–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è, –±–∏–ª–µ—Ç—ã –Ω–∞ –≤—ã—Å—Ç–∞–≤–∫–∏, Stand-up –∫–æ–Ω—Ü–µ—Ä—Ç—ã, —ç–∫—Å–∫—É—Ä—Å–∏–∏). –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ - –ø—Ä–æ—Å–∏–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª.\n\n–° —Ä–∞–¥–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤—ã —É—Å–ª—ã—à–∞—Ç—å –≤–∞—à–∏ –ø–æ—Ö–≤–∞–ª—ã –∏ –∂–∞–ª–æ–±—ã –ø–æ –Ω–∞—à–µ–º—É —Ç–æ–≤–∞—Ä—É",
        reply_markup=markup
    )






@dp.callback_query_handler(lambda query: query.data in {'praise', 'questions', 'complain', 'improve'})
async def bought_item(callback_query: types.CallbackQuery):
    print("in")
    if callback_query.data == 'praise':
        print("in")
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ì–æ—Ç–æ–≤—ã –≤—ã—Å–ª—É—à–∞—Ç—å –≤–∞—Å:"
        )
    elif callback_query.data == 'complain':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω–µ —É—Å—Ç—Ä–æ–∏–ª–æ –≤–∞—Å –≤ –Ω–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ."
        )
    elif callback_query.data == 'questions':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ß–µ–º –º—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å –≤–∞–º?")
    elif callback_query.data == 'improve':
        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            text="–ú—ã –≥–æ—Ç–æ–≤—ã –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:"
        )
    await Form.feedback_state.set()

@dp.message_handler(state=Form.feedback_state)
async def process_name(message: types.Message, state: FSMContext):
    feedback = message.text

@dp.message_handler(state=Form.feedback_state)
async def process_name(message: types.Message, state: FSMContext):
    feedback_from_user = message.text
    message_delete.get(message.chat.id, []).append(message.message_id)
    for message_id in message_delete.get(message.chat.id, []):
        try:
            await bot.delete_message(message.chat.id, message_id)
        except aiogram.utils.exceptions.MessageToDeleteNotFound:
            pass
    await state.finish()
    user_name = message.from_user.first_name
    markup = InlineKeyboardMarkup(row_width=1)
    button1 = InlineKeyboardButton("–Ø –∫—É–ø–∏–ª(–∞) —Ç–æ–≤–∞—Ä", callback_data='bought')
    button2 = InlineKeyboardButton("–Ø –Ω–µ –∫—É–ø–∏–ª(–∞) —Ç–æ–≤–∞—Ä", callback_data='not_bought')
    markup.add(button1, button2)

    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! –ë—Ä–µ–Ω–¥ Dave&Ante —Ä–∞–¥–∞ –≤–∞—à–µ–º—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—é –≤ –Ω–∞—à–µ–º —á–∞—Ç-–±–æ—Ç–µ.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞, —Å–¥–µ–ª–∞–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –≤ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤).",
        reply_markup=markup
    )


if __name__ == '__main__':
    executor.start_polling(dp)
